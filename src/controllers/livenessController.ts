/**
 * Synaps IndividualLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import {
  LivenessInitResponse,
  livenessInitResponseSchema,
} from '../models/livenessInitResponse';
import {
  LivenessVerificationResponse,
  livenessVerificationResponseSchema,
} from '../models/livenessVerificationResponse';
import {
  LivenessVerifyResponse,
  livenessVerifyResponseSchema,
} from '../models/livenessVerifyResponse';
import { string } from '../schema';
import { BaseController } from './baseController';

export class LivenessController extends BaseController {
  /**
   * Verify if the person in front of his camera is alive
   *
   * @param clientId   Client id
   * @param stepId     Step Id of the current identity step you want to submit
   * @param sessionId  Initialised Session-Id
   * @return Response from the API call
   */
  async livenessInitPOST(
    clientId: string,
    stepId: string,
    sessionId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LivenessInitResponse>> {
    const req = this.createRequest('POST', '/liveness/init');
    const mapped = req.prepareArgs({
      clientId: [clientId, string()],
      stepId: [stepId, string()],
      sessionId: [sessionId, string()],
    });
    req.header('Client-Id', mapped.clientId);
    req.header('Session-Id', mapped.sessionId);
    req.query('step_id', mapped.stepId);
    return req.callAsJson(livenessInitResponseSchema, requestOptions);
  }

  /**
   * Verify if the person in front of his camera is alive
   *
   * @param clientId   Client id
   * @param stepId     Step Id of the current identity step you want to submit
   * @param sessionId  Initialised Session-Id
   * @return Response from the API call
   */
  async livenessVerifyPOST(
    clientId: string,
    stepId: string,
    sessionId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LivenessVerifyResponse>> {
    const req = this.createRequest('POST', '/liveness/verify');
    const mapped = req.prepareArgs({
      clientId: [clientId, string()],
      stepId: [stepId, string()],
      sessionId: [sessionId, string()],
    });
    req.header('Client-Id', mapped.clientId);
    req.header('Session-Id', mapped.sessionId);
    req.query('step_id', mapped.stepId);
    return req.callAsJson(livenessVerifyResponseSchema, requestOptions);
  }

  /**
   * All information about liveness verification details
   *
   * @param clientId   Client id
   * @param stepId     All information about phone verification details
   * @param sessionId  Initialised Session-Id
   * @return Response from the API call
   */
  async livenessDetailsGET(
    clientId: string,
    stepId: string,
    sessionId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LivenessVerificationResponse>> {
    const req = this.createRequest('GET', '/liveness/details');
    const mapped = req.prepareArgs({
      clientId: [clientId, string()],
      stepId: [stepId, string()],
      sessionId: [sessionId, string()],
    });
    req.header('Client-Id', mapped.clientId);
    req.header('Session-Id', mapped.sessionId);
    req.query('step_id', mapped.stepId);
    req.throwOn(400, ApiError, 'Invalid Api Key');
    return req.callAsJson(livenessVerificationResponseSchema, requestOptions);
  }
}
