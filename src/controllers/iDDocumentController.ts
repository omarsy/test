/**
 * Synaps IndividualLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, FileWrapper, RequestOptions } from '../core';
import {
  DocumentTypeEnum,
  documentTypeEnumSchema,
} from '../models/documentTypeEnum';
import {
  IdentityVerificationResponse,
  identityVerificationResponseSchema,
} from '../models/identityVerificationResponse';
import { SessionInfo, sessionInfoSchema } from '../models/sessionInfo';
import { array, string } from '../schema';
import { BaseController } from './baseController';

export class IDDocumentController extends BaseController {
  /**
   * Submit Identity document
   *
   * @param clientId       Client id
   * @param stepId         Step Id of the current identity step you want to submit
   * @param sessionId      Initialised Session-Id
   * @param backDocument   Back Host ID document (image/jpg, image/jpeg, image/png)
   * @param frontDocument  Front Host ID document (image/jpg, image/jpeg, image/png)
   * @param documentType
   * @param country        Country of document in alpha 3 code (ISO-3166) (e.g. for France send
   *                                           FRA as country value
   * @return Response from the API call
   */
  async identitySubmitPOST(
    clientId: string,
    stepId: string,
    sessionId: string,
    backDocument: FileWrapper,
    frontDocument: FileWrapper,
    documentType: DocumentTypeEnum,
    country: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SessionInfo[]>> {
    const req = this.createRequest('POST', '/identity/submit');
    const mapped = req.prepareArgs({
      clientId: [clientId, string()],
      stepId: [stepId, string()],
      sessionId: [sessionId, string()],
      documentType: [documentType, documentTypeEnumSchema],
      country: [country, string()],
    });
    req.header('Client-Id', mapped.clientId);
    req.header('Session-Id', mapped.sessionId);
    req.query('step_id', mapped.stepId);
    req.formData({
      back_document: backDocument,
      front_document: frontDocument,
      document_type: mapped.documentType,
      country: mapped.country,
    });
    req.throwOn(400, ApiError, 'Invalid Api Key');
    return req.callAsJson(array(sessionInfoSchema), requestOptions);
  }

  /**
   * All information about identity verification details
   *
   * @param clientId   Client id
   * @param stepId     Step Id of the current identity step you want to submit
   * @param sessionId  Initialised Session-Id
   * @return Response from the API call
   */
  async identityDetailsGET(
    clientId: string,
    stepId: string,
    sessionId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IdentityVerificationResponse>> {
    const req = this.createRequest('GET', '/identity/details');
    const mapped = req.prepareArgs({
      clientId: [clientId, string()],
      stepId: [stepId, string()],
      sessionId: [sessionId, string()],
    });
    req.header('Client-Id', mapped.clientId);
    req.header('Session-Id', mapped.sessionId);
    req.query('step_id', mapped.stepId);
    req.throwOn(400, ApiError, 'Invalid Session ID');
    return req.callAsJson(identityVerificationResponseSchema, requestOptions);
  }
}
