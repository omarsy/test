/**
 * Synaps IndividualLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { SessionAlias, sessionAliasSchema } from '../models/sessionAlias';
import { SessionCreated, sessionCreatedSchema } from '../models/sessionCreated';
import { SessionInfo, sessionInfoSchema } from '../models/sessionInfo';
import { State10Enum, state10EnumSchema } from '../models/state10Enum';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';

export class SessionController extends BaseController {
  /**
   * Initialize a new session to start a new verification process
   *
   * @param clientId  Client id
   * @param alias     Custom alias that will be available in session list
   * @return Response from the API call
   */
  async sessionInitPOST(
    clientId: string,
    alias?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SessionCreated>> {
    const req = this.createRequest('POST', '/session/init');
    const mapped = req.prepareArgs({
      clientId: [clientId, string()],
      alias: [alias, optional(string())],
    });
    req.header('Client-Id', mapped.clientId);
    req.query('alias', mapped.alias);
    req.throwOn(400, ApiError, 'Invalid Api Key');
    return req.callAsJson(sessionCreatedSchema, requestOptions);
  }

  /**
   * Get information about an initially created session
   *
   * @param sessionId  Session-Id that you want retrieve info
   * @param clientId   Client id
   * @return Response from the API call
   */
  async sessionInfoGET(
    sessionId: string,
    clientId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SessionInfo>> {
    const req = this.createRequest('GET', '/session/info');
    const mapped = req.prepareArgs({
      sessionId: [sessionId, string()],
      clientId: [clientId, string()],
    });
    req.header('Session-Id', mapped.sessionId);
    req.header('Client-Id', mapped.clientId);
    req.throwOn(400, ApiError, 'Invalid Api Key');
    return req.callAsJson(sessionInfoSchema, requestOptions);
  }

  /**
   * List sessions with their alias
   *
   * @param alias     List sessions with their alias
   * @param clientId  Client id
   * @return Response from the API call
   */
  async sessionAliasGET(
    alias: string,
    clientId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SessionInfo[]>> {
    const req = this.createRequest('GET', '/session/alias');
    const mapped = req.prepareArgs({
      alias: [alias, string()],
      clientId: [clientId, string()],
    });
    req.header('Client-Id', mapped.clientId);
    req.query('alias', mapped.alias);
    req.throwOn(400, ApiError, 'Invalid Api Key');
    return req.callAsJson(array(sessionInfoSchema), requestOptions);
  }

  /**
   * List sessions with their state and alias if needed
   *
   * @param state     PENDING - When all the steps of the verification flow are not completed yet
   *                                 FINISHED - When all the steps of the verification are completed and VALIDATED
   *                                 CANCELLED - When a session is cancelled
   * @param clientId  Client id
   * @return Response from the API call
   */
  async sessionListByStateGET(
    state: State10Enum,
    clientId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SessionAlias[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      state: [state, state10EnumSchema],
      clientId: [clientId, string()],
    });
    req.header('Client-Id', mapped.clientId);
    req.appendTemplatePath`/session/list/${mapped.state}`;
    req.throwOn(400, ApiError, 'Invalid Api Key');
    return req.callAsJson(array(sessionAliasSchema), requestOptions);
  }
}
