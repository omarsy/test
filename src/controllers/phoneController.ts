/**
 * Synaps IndividualLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import { MethodEnum, methodEnumSchema } from '../models/methodEnum';
import {
  PhoneVerificationResponse,
  phoneVerificationResponseSchema,
} from '../models/phoneVerificationResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class PhoneController extends BaseController {
  /**
   * Send verification code by SMS or Call
   *
   * @param clientId     Client id
   * @param sessionId    Initialised Session-Id
   * @param phoneNumber  Phone number
   * @param countryCode  Phone Country Code (cf. Country Calling Code Page) (e.g. for France send +33 as
   *                                   country_code value)
   * @param method       call - by call  sms - by text message
   * @param stepId       Step Id of the current identity step you want to submit
   * @return Response from the API call
   */
  async phoneSendPOST(
    clientId: string,
    sessionId: string,
    phoneNumber: string,
    countryCode: string,
    method: MethodEnum,
    stepId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/phone/send');
    const mapped = req.prepareArgs({
      clientId: [clientId, string()],
      sessionId: [sessionId, string()],
      phoneNumber: [phoneNumber, string()],
      countryCode: [countryCode, string()],
      method: [method, methodEnumSchema],
      stepId: [stepId, optional(string())],
    });
    req.header('Client-Id', mapped.clientId);
    req.header('Session-Id', mapped.sessionId);
    req.query('step_id', mapped.stepId);
    req.form({
      phone_number: mapped.phoneNumber,
      country_code: mapped.countryCode,
      method: mapped.method,
    });
    return req.call(requestOptions);
  }

  /**
   * Confirm phone number using previously sent authentication codel
   *
   * @param clientId   Client id
   * @param stepId     Step Id of the current identity step you want to submit
   * @param sessionId  Initialised Session-Id
   * @param code       authentication code
   * @return Response from the API call
   */
  async phoneConfirmPOST(
    clientId: string,
    stepId: string,
    sessionId: string,
    code: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/phone/confirm');
    const mapped = req.prepareArgs({
      clientId: [clientId, string()],
      stepId: [stepId, string()],
      sessionId: [sessionId, string()],
      code: [code, string()],
    });
    req.header('Client-Id', mapped.clientId);
    req.header('Session-Id', mapped.sessionId);
    req.query('step_id', mapped.stepId);
    req.form({
      code: mapped.code,
    });
    return req.call(requestOptions);
  }

  /**
   * All information about identity verification details
   *
   * @param clientId   Client id
   * @param stepId     All information about phone verification details
   * @param sessionId  Initialised Session-Id
   * @return Response from the API call
   */
  async phoneDetailsGET(
    clientId: string,
    stepId: string,
    sessionId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PhoneVerificationResponse>> {
    const req = this.createRequest('GET', '/phone/details');
    const mapped = req.prepareArgs({
      clientId: [clientId, string()],
      stepId: [stepId, string()],
      sessionId: [sessionId, string()],
    });
    req.header('Client-Id', mapped.clientId);
    req.header('Session-Id', mapped.sessionId);
    req.query('step_id', mapped.stepId);
    req.throwOn(400, ApiError, 'Invalid Api Key');
    return req.callAsJson(phoneVerificationResponseSchema, requestOptions);
  }
}
